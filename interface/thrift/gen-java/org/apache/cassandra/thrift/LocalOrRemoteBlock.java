/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LocalOrRemoteBlock implements org.apache.thrift.TBase<LocalOrRemoteBlock, LocalOrRemoteBlock._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LocalOrRemoteBlock");

  private static final org.apache.thrift.protocol.TField REMOTE_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("remote_block", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCAL_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("local_block", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  public ByteBuffer remote_block;
  public LocalBlock local_block;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REMOTE_BLOCK((short)1, "remote_block"),
    LOCAL_BLOCK((short)2, "local_block");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REMOTE_BLOCK
          return REMOTE_BLOCK;
        case 2: // LOCAL_BLOCK
          return LOCAL_BLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REMOTE_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("remote_block", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LOCAL_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("local_block", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocalBlock.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LocalOrRemoteBlock.class, metaDataMap);
  }

  public LocalOrRemoteBlock() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocalOrRemoteBlock(LocalOrRemoteBlock other) {
    if (other.isSetRemote_block()) {
      this.remote_block = org.apache.thrift.TBaseHelper.copyBinary(other.remote_block);
;
    }
    if (other.isSetLocal_block()) {
      this.local_block = new LocalBlock(other.local_block);
    }
  }

  public LocalOrRemoteBlock deepCopy() {
    return new LocalOrRemoteBlock(this);
  }

  @Override
  public void clear() {
    this.remote_block = null;
    this.local_block = null;
  }

  public byte[] getRemote_block() {
    setRemote_block(org.apache.thrift.TBaseHelper.rightSize(remote_block));
    return remote_block == null ? null : remote_block.array();
  }

  public ByteBuffer bufferForRemote_block() {
    return remote_block;
  }

  public LocalOrRemoteBlock setRemote_block(byte[] remote_block) {
    setRemote_block(remote_block == null ? (ByteBuffer)null : ByteBuffer.wrap(remote_block));
    return this;
  }

  public LocalOrRemoteBlock setRemote_block(ByteBuffer remote_block) {
    this.remote_block = remote_block;
    return this;
  }

  public void unsetRemote_block() {
    this.remote_block = null;
  }

  /** Returns true if field remote_block is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote_block() {
    return this.remote_block != null;
  }

  public void setRemote_blockIsSet(boolean value) {
    if (!value) {
      this.remote_block = null;
    }
  }

  public LocalBlock getLocal_block() {
    return this.local_block;
  }

  public LocalOrRemoteBlock setLocal_block(LocalBlock local_block) {
    this.local_block = local_block;
    return this;
  }

  public void unsetLocal_block() {
    this.local_block = null;
  }

  /** Returns true if field local_block is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_block() {
    return this.local_block != null;
  }

  public void setLocal_blockIsSet(boolean value) {
    if (!value) {
      this.local_block = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REMOTE_BLOCK:
      if (value == null) {
        unsetRemote_block();
      } else {
        setRemote_block((ByteBuffer)value);
      }
      break;

    case LOCAL_BLOCK:
      if (value == null) {
        unsetLocal_block();
      } else {
        setLocal_block((LocalBlock)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REMOTE_BLOCK:
      return getRemote_block();

    case LOCAL_BLOCK:
      return getLocal_block();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REMOTE_BLOCK:
      return isSetRemote_block();
    case LOCAL_BLOCK:
      return isSetLocal_block();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocalOrRemoteBlock)
      return this.equals((LocalOrRemoteBlock)that);
    return false;
  }

  public boolean equals(LocalOrRemoteBlock that) {
    if (that == null)
      return false;

    boolean this_present_remote_block = true && this.isSetRemote_block();
    boolean that_present_remote_block = true && that.isSetRemote_block();
    if (this_present_remote_block || that_present_remote_block) {
      if (!(this_present_remote_block && that_present_remote_block))
        return false;
      if (!this.remote_block.equals(that.remote_block))
        return false;
    }

    boolean this_present_local_block = true && this.isSetLocal_block();
    boolean that_present_local_block = true && that.isSetLocal_block();
    if (this_present_local_block || that_present_local_block) {
      if (!(this_present_local_block && that_present_local_block))
        return false;
      if (!this.local_block.equals(that.local_block))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_remote_block = true && (isSetRemote_block());
    builder.append(present_remote_block);
    if (present_remote_block)
      builder.append(remote_block);

    boolean present_local_block = true && (isSetLocal_block());
    builder.append(present_local_block);
    if (present_local_block)
      builder.append(local_block);

    return builder.toHashCode();
  }

  public int compareTo(LocalOrRemoteBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LocalOrRemoteBlock typedOther = (LocalOrRemoteBlock)other;

    lastComparison = Boolean.valueOf(isSetRemote_block()).compareTo(typedOther.isSetRemote_block());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote_block()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote_block, typedOther.remote_block);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_block()).compareTo(typedOther.isSetLocal_block());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_block()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_block, typedOther.local_block);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REMOTE_BLOCK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.remote_block = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOCAL_BLOCK
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.local_block = new LocalBlock();
            this.local_block.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.remote_block != null) {
      if (isSetRemote_block()) {
        oprot.writeFieldBegin(REMOTE_BLOCK_FIELD_DESC);
        oprot.writeBinary(this.remote_block);
        oprot.writeFieldEnd();
      }
    }
    if (this.local_block != null) {
      if (isSetLocal_block()) {
        oprot.writeFieldBegin(LOCAL_BLOCK_FIELD_DESC);
        this.local_block.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocalOrRemoteBlock(");
    boolean first = true;

    if (isSetRemote_block()) {
      sb.append("remote_block:");
      if (this.remote_block == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.remote_block, sb);
      }
      first = false;
    }
    if (isSetLocal_block()) {
      if (!first) sb.append(", ");
      sb.append("local_block:");
      if (this.local_block == null) {
        sb.append("null");
      } else {
        sb.append(this.local_block);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}


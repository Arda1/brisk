//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
Stock = function(args){
this.ticker = null
this.price = null
if( args != null ){if (null != args.ticker)
this.ticker = args.ticker
if (null != args.price)
this.price = args.price
}}
Stock.prototype = {}
Stock.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
  var ret = input.readFieldBegin()
  var fname = ret.fname
  var ftype = ret.ftype
  var fid   = ret.fid
  if (ftype == Thrift.Type.STOP) 
    break
  switch(fid)
  {
    case 1:    if (ftype == Thrift.Type.STRING) {
      var rtmp = input.readString()
this.ticker = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    case 2:    if (ftype == Thrift.Type.DOUBLE) {
      var rtmp = input.readDouble()
this.price = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    default:
      input.skip(ftype)
  }
  input.readFieldEnd()
}
input.readStructEnd()
return
}

Stock.prototype.write = function(output){ 
output.writeStructBegin('Stock')
if (null != this.ticker) {
  output.writeFieldBegin('ticker', Thrift.Type.STRING, 1)
  output.writeString(this.ticker)
  output.writeFieldEnd()
}
if (null != this.price) {
  output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2)
  output.writeDouble(this.price)
  output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

Portfolio = function(args){
this.name = null
this.constituents = null
this.basis = null
this.price = null
this.largest_10day_loss = null
this.largest_10day_loss_date = null
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.constituents)
this.constituents = args.constituents
if (null != args.basis)
this.basis = args.basis
if (null != args.price)
this.price = args.price
if (null != args.largest_10day_loss)
this.largest_10day_loss = args.largest_10day_loss
if (null != args.largest_10day_loss_date)
this.largest_10day_loss_date = args.largest_10day_loss_date
}}
Portfolio.prototype = {}
Portfolio.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
  break
switch(fid)
{
  case 1:  if (ftype == Thrift.Type.STRING) {
    var rtmp = input.readString()
this.name = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 2:  if (ftype == Thrift.Type.LIST) {
    {
      var _size0 = 0
      var rtmp3
      this.constituents = []
      var _etype3 = 0
      rtmp3 = input.readListBegin()
      _etype3 = rtmp3.etype
      _size0 = rtmp3.size
      for (var _i4 = 0; _i4 < _size0; ++_i4)
      {
        var elem5 = null
        elem5 = new Stock()
        elem5.read(input)
        this.constituents.push(elem5)
      }
      input.readListEnd()
    }
  } else {
    input.skip(ftype)
  }
  break
  case 3:  if (ftype == Thrift.Type.DOUBLE) {
    var rtmp = input.readDouble()
this.basis = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 4:  if (ftype == Thrift.Type.DOUBLE) {
    var rtmp = input.readDouble()
this.price = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 5:  if (ftype == Thrift.Type.DOUBLE) {
    var rtmp = input.readDouble()
this.largest_10day_loss = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 6:  if (ftype == Thrift.Type.STRING) {
    var rtmp = input.readString()
this.largest_10day_loss_date = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  default:
    input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

Portfolio.prototype.write = function(output){ 
output.writeStructBegin('Portfolio')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.constituents) {
output.writeFieldBegin('constituents', Thrift.Type.LIST, 2)
{
  output.writeListBegin(Thrift.Type.STRUCT, this.constituents.length)
  {
    for(var iter6 in this.constituents)
    {
      iter6=this.constituents[iter6]
      iter6.write(output)
    }
  }
  output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.basis) {
output.writeFieldBegin('basis', Thrift.Type.DOUBLE, 3)
output.writeDouble(this.basis)
output.writeFieldEnd()
}
if (null != this.price) {
output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4)
output.writeDouble(this.price)
output.writeFieldEnd()
}
if (null != this.largest_10day_loss) {
output.writeFieldBegin('largest_10day_loss', Thrift.Type.DOUBLE, 5)
output.writeDouble(this.largest_10day_loss)
output.writeFieldEnd()
}
if (null != this.largest_10day_loss_date) {
output.writeFieldBegin('largest_10day_loss_date', Thrift.Type.STRING, 6)
output.writeString(this.largest_10day_loss_date)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}


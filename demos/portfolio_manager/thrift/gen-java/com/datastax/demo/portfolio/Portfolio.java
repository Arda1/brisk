/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.datastax.demo.portfolio;

import java.util.*;

import org.apache.commons.lang.builder.HashCodeBuilder;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Portfolio implements TBase<Portfolio, Portfolio._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Portfolio");

  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField CONSTITUENTS_FIELD_DESC = new TField("constituents", TType.LIST, (short)2);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.DOUBLE, (short)3);

  public String name;
  public List<Stock> constituents;
  public double price;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NAME((short)1, "name"),
    CONSTITUENTS((short)2, "constituents"),
    PRICE((short)3, "price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CONSTITUENTS
          return CONSTITUENTS;
        case 3: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CONSTITUENTS, new FieldMetaData("constituents", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Stock.class))));
    tmpMap.put(_Fields.PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Portfolio.class, metaDataMap);
  }

  public Portfolio() {
  }

  public Portfolio(
    String name,
    List<Stock> constituents,
    double price)
  {
    this();
    this.name = name;
    this.constituents = constituents;
    this.price = price;
    setPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Portfolio(Portfolio other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetConstituents()) {
      List<Stock> __this__constituents = new ArrayList<Stock>();
      for (Stock other_element : other.constituents) {
        __this__constituents.add(new Stock(other_element));
      }
      this.constituents = __this__constituents;
    }
    this.price = other.price;
  }

  public Portfolio deepCopy() {
    return new Portfolio(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.constituents = null;
    setPriceIsSet(false);
    this.price = 0.0;
  }

  public String getName() {
    return this.name;
  }

  public Portfolio setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getConstituentsSize() {
    return (this.constituents == null) ? 0 : this.constituents.size();
  }

  public java.util.Iterator<Stock> getConstituentsIterator() {
    return (this.constituents == null) ? null : this.constituents.iterator();
  }

  public void addToConstituents(Stock elem) {
    if (this.constituents == null) {
      this.constituents = new ArrayList<Stock>();
    }
    this.constituents.add(elem);
  }

  public List<Stock> getConstituents() {
    return this.constituents;
  }

  public Portfolio setConstituents(List<Stock> constituents) {
    this.constituents = constituents;
    return this;
  }

  public void unsetConstituents() {
    this.constituents = null;
  }

  /** Returns true if field constituents is set (has been asigned a value) and false otherwise */
  public boolean isSetConstituents() {
    return this.constituents != null;
  }

  public void setConstituentsIsSet(boolean value) {
    if (!value) {
      this.constituents = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public Portfolio setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been asigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CONSTITUENTS:
      if (value == null) {
        unsetConstituents();
      } else {
        setConstituents((List<Stock>)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case CONSTITUENTS:
      return getConstituents();

    case PRICE:
      return new Double(getPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case CONSTITUENTS:
      return isSetConstituents();
    case PRICE:
      return isSetPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Portfolio)
      return this.equals((Portfolio)that);
    return false;
  }

  public boolean equals(Portfolio that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_constituents = true && this.isSetConstituents();
    boolean that_present_constituents = true && that.isSetConstituents();
    if (this_present_constituents || that_present_constituents) {
      if (!(this_present_constituents && that_present_constituents))
        return false;
      if (!this.constituents.equals(that.constituents))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_constituents = true && (isSetConstituents());
    builder.append(present_constituents);
    if (present_constituents)
      builder.append(constituents);

    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);

    return builder.toHashCode();
  }

  public int compareTo(Portfolio other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Portfolio typedOther = (Portfolio)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstituents()).compareTo(typedOther.isSetConstituents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstituents()) {
      lastComparison = TBaseHelper.compareTo(this.constituents, typedOther.constituents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CONSTITUENTS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.constituents = new ArrayList<Stock>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                Stock _elem2;
                _elem2 = new Stock();
                _elem2.read(iprot);
                this.constituents.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRICE
          if (field.type == TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.constituents != null) {
      oprot.writeFieldBegin(CONSTITUENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.constituents.size()));
        for (Stock _iter3 : this.constituents)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Portfolio(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constituents:");
    if (this.constituents == null) {
      sb.append("null");
    } else {
      sb.append(this.constituents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

